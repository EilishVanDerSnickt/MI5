 <Route path='/info' Component={Info}>

import React from 'react';

class Info extends React.Component {
    constructor(props){
        super(props);
        this.state = {
            items: [],
            isLoaded: false,
        }
    } //constructor

    componentDidMount(){
        fetch('https://kitsu.io/api/edge/anime?filter[text]=one%20piece')
        .then(res => res.json())
        .then(json => {
            this.setState({
                isLoaded: true,
                items: json,
            })
        });
    } //componentDidMount

    render(){
        var {isLoaded, items} = this.state;
        if (!isLoaded){
            return <h1>Loading ... </h1>
        } else {
            var title = items.data[0].attributes.titles.en;
            var startDate = items.data[0].attributes.startDate;
            return (
                <div>
                   <h1>{title}</h1>
                   <p className="startDate">{startDate}</p>
                </div>
            );
        }
    } //render
}

export default Info;

import React from 'react'

const Info = () => {
    return (
        <h1>Info</h1>
    )
}

export default Info;


 var source = items.data[0].attributes.posterImage.tiny
            return (
                <BrowserRouter>
                    <div>
                        <Link to="/info">
                            <img src={source} alt="One Piece poster"></img>
                        </Link>
                        <Route path='/info' component={Info}/>
                    </div>
                </BrowserRouter>
            );


            items.forEach(item => {
                this.item = items.data[i].id;
                i++;
                return <p>{item}</p>
            });

 ids = ids.map(function(item, index){
                return(
                    <li key={index}>{item}</li>
                );
            });

            return (
                <div>
                    <ul>{ids}</ul>
                </div>
            );

import firebase from "firebase";

if (!firebase.apps.length) {
    // Initialize Cloud Firestore through Firebase
    const firebaseApp = firebase.initializeApp({
        apiKey: 'AIzaSyBQmDSKrot-kkHU9YtFrI1PMCr3YY0156Y',
        authDomain: 'https://animereactapp.firebaseapp.com/',
        projectId: 'animereactapp',
        databaseURL: "https://animereactapp.firebaseio.com/",
        storageBucket: "gs://animereactapp.appspot.com",
        messagingSenderId: "863356677005"
    });

    var db = firebaseApp.firestore();

     db.collection("TrendingAnime").add({
        id: ids[i],
        posterURL: posters[i]
    })
    .then(function(docRef) {
        console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });


var Trending = db.collection("TrendingAnime");
var query = Trending.where("id", "==", ids[i]);
Trending.doc(query).update({posterURL: posters[i]});

db.collection("cities").where("capital", "==", true)
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });


db.collection("TrendingAnime").where("id", "==", ids[i])
                    .get()
                    .then(function(querySnapshot) {
                        querySnapshot.forEach(function(doc) {
                            db.collection("TrendingAnime").doc(doc.id).update({posterURL: posters[i]});
                            // doc.data() is never undefined for query doc snapshots
                            console.log(doc.id, " => ", doc.data());
                        });
                    })
                    .catch(function(error) {
                        console.log("Error getting documents: ", error);
                    });

if (!db.collection("TrendingAnime")){
    db.collection("TrendingAnime").add({
        id: ids[i],
        posterURL: posters[i]
    })
    .then(function(docRef) {
        console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });
    } else {
    db.collection("TrendingAnime").where("id", "==", ids[i])
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
            var Trending = db.collection("TrendingAnime");
            // Set the "capital" field of the city 'DC'
            return Trending.doc(doc.id).update({
                posterURL: posters[i]
            })
            .then(function() {
                console.log("Document successfully updated!");
            })
            .catch(function(error) {
                // The document probably doesn't exist.
                console.error("Error updating document: ", error);
            });
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });

    }

     return Trending.doc(doc.id).update({
                                posterURL: posters[i]
                            })
                            .then(function() {
                                console.log("Document successfully updated!");
                            })
                            .catch(function(error) {
                                // The document probably doesn't exist.
                                console.error("Error updating document: ", error);
                            });

if (!db.collection("TrendingAnime")){
    db.collection("TrendingAnime").add({
        id: ids[i],
        posterURL: posters[i]
    })
    .then(function(docRef) {
        console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });
} else {
    /** 
    db.collection("TrendingAnime").where("id", "==", ids[i])
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
            var Trending = db.collection("TrendingAnime");
            
            db.collection("TrendingAnime").doc(doc.id).set({
                posterURL: posters[i]
            })
            .then(function() {
                console.log("Document successfully written!");
            })
            .catch(function(error) {
                console.error("Error writing document: ", error);
            });
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });*/
    
}

db.collection("TrendingAnime").where("posterURL", "==", posters[i])
.get()
.then(function(querySnapshot) {
    querySnapshot.forEach(function(doc) {
        // doc.data() is never undefined for query doc snapshots
        console.log("Geen aanpassing is gemaakt");
    });
})
.catch(function(error) {
    console.log("Error getting documents: ", error);
});


// delete a collection
db.collection("TrendingAnime")
.get()
.then(res => {
    res.forEach(element => {
    element.ref.delete();
    });
});

//or

// First perform the query
db.collection('TrendingAnime').where('id','==', ids[i]).get()
.then(function(querySnapshot) {
    // Once we get the results, begin a batch
    var batch = db.batch();

    querySnapshot.forEach(function(doc) {
        // For each doc, add a delete operation to the batch
        batch.delete(doc.ref);
    });

    // Commit the batch
    return batch.commit();
}).then(function() {
    // Delete completed!
    // ...
}); 

var request = new XMLHttpRequest();

        request.open('GET', 'https://kitsu.io/api/edge/anime/' + ids[i])

        request.onload = function(){
          var ourdata = JSON.parse(request.responseText);
          console.log(ourdata);
        }

        request.send();

         console.log(id);
    console.log('var ourRequest = new XMLHttpRequest(););

    var isOpgehaald = false;

    fetch('https://kitsu.io/api/edge/anime/' + id)
    .then(res => res.json())
    .then(json => {
        this.setState({
            APIcharacters: json,
        })

        isOpgehaald = true;

        if (!isOpgehaald){
          console.log('API nog niet opgehaald')
        }else {
          return isOpgehaald;
        }
    }); 


     request2.open('GET', 'https://kitsu.io/api/edge/media-characters/' + characterIDs[i] + '/character');

        request2.onload = function() {
          var ourdata = JSON.parse(request2.responseText);
          console.log(ourdata);
          var naam = ourdata.data.attributes.names.en;
          console.log(naam);
        }
        request2.send();

<div className="App">
<div className="inputDiv"><input type="text" className="input" placeholder="Search..." /></div>
<h1 className="Anime">AniME</h1>
<Thomaach value={this.state} />
<footer/>
<div className="footer">
  <a href="AnimeList">AnimeList</a>
  <a href="TODO">Quiz</a>
</div>
</div>


PROBEREN ALLE POSTERS TE TONEN AAN DE HAND VAN LOCALSTORAGE
if (localStorage.getItem("Posters") === null) {
          const StatePls = (anime) =>  {
            return this.addAnime(anime)
          }
      
          var anime = function(name, poster, id) {
            this.name = name
            this.poster = poster
            this.id = id
          }
      
          var ids = [];
          var posters = [];
          var names = [];
          const that = this;
          var counter = that.state.index;
            
          fetch('https://kitsu.io/api/edge/trending/anime')
          .then(response => {
            if(response.ok) return response.json();
            throw new Error(response.statusText)  // throw an error if there's something wrong with the response
          })
          .then(function handleData(data) {
              console.log(data);
  
              that.setState({
                items: data,
                index: counter + 1,
            })
  
              for (let i = 0; i < 10; i++){
                //vul de arrays met de opgehaalde data
                ids[i] = data.data[i].id;
                posters[i] = data.data[i].attributes.posterImage.medium; 
                names[i] = data.data[i].attributes.canonicalTitle;
              }
          }).then(function addToState() {
              for (let i = 0; i < ids.length; i++) {
                StatePls(new anime(names[i], posters[i] ,ids[i]))
                //this.addAnime(new anime(names[i], posters[i] ,ids[i]));
                  //console.log(i)
              }
  
              that.addToLocalStorage(ids, "IDs");
              that.addToLocalStorage(posters, "Posters");
              that.addToLocalStorage(names, "ENJP_titles");
          })
        } else {
          var names = localStorage.getItem("ENJP_titles");
          var posters = localStorage.getItem("Posters");
          var ids = localStorage.getItem("IDs");

          const StatePls = (anime) =>  {
            return this.addAnime(anime)
          }
      
          var anime = function(name, poster, id) {
            this.name = name
            this.poster = poster
            this.id = id
          }

          for (let i = 0; i < ids.length; i++) {
            StatePls(new anime(names[i], posters[i] ,ids[i]))
          }
        }

.posterImg {
  border-radius: 0.5em;
  box-shadow: 0.25em 0.25em 0.25em black;
  max-width: 100%;
  min-width: 10em;
}

.stickyDiv {
  position: sticky;
  top: 0;
}

.posterDetails {
  margin-left: 2em;
  float: left;
  max-width: 25em;
  min-width: 10em;
}

.h4Details {
  padding-left: 2em;
  display: inline;
}

.omkader {
  border: 3px double #1C6EA4;
  border-radius: 10px 10px 10px 10px;
}

.detailsCharPic {
  max-width: 9em;
}


@media screen and (max-width: 399px) and (max-height: 600px) {

  .grid-view {
    display: grid;
    grid-template-columns: repeat(2,40vw);
  }
  
  .figcapText{
    font-size: medium;
  }

  .footer {
      display: grid;
      grid-template-columns: repeat(2,50vw);
      font-size: medium;
    }
  
  figure img {
      vertical-align: top;
    }
  
  figure figcaption {
      text-align: center;
  }
  
  figure {
    display: inline-block;
    text-align: center;
  }
  
  .Div-anime {
    height: 60vw;
    width: 38vw;
  }

  .posterImg {
    height: 50vw;
    width: 38vw;
  }

  .Div-Posters {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5vw;
  }

}

@media screen and (max-width: 399px) and (min-height: 600px) {
  
  .grid-view {
    display: grid;
    grid-template-columns: repeat(2,40vw);
  }
  
  .figcapText{
    font-size: medium;
  }

  .footer {
      display: grid;
      grid-template-columns: repeat(2,50vw);
      font-size: medium;
    }
  
  figure img {
      vertical-align: top;
    }
  
  figure figcaption {
      text-align: center;
  }
  
  figure {
    display: inline-block;
    text-align: center;
  }
  
  .Div-anime {
    height: 70vw;
    width: 38vw;
  }

  .posterImg {
    height: 50vw;
    width: 38vw;
  }

  .Div-Posters {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5vw;
  }
}

@media screen and (min-width: 400px) and (max-width: 799px) {
  .grid-view {
    display: grid;
    grid-template-columns: repeat(2,40vw);
  }

  .figcapText{
    font-size: medium;
  }
  
  .figcapText{
    font-size: medium;
  }

  .footer {
      display: grid;
      grid-template-columns: repeat(2,50vw);
      font-size: medium;
    }
  
  figure img {
      vertical-align: top;
    }
  
  figure figcaption {
      text-align: center;
  }
  
  figure {
    display: inline-block;
    text-align: center;
  }
  
  .Div-anime {
    height: 60vw;
    width: 38vw;
  }

  .posterImg {
    height: 50vw;
    width: 38vw;
  }

  .Div-Posters {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5vw;
  }
}

@media screen and (min-width: 800px)  {
  .grid-view {
    display: grid;
    grid-template-columns: repeat(4,25vw);
  }
  
  .figcapText{
    font-size: x-large;
  }

  .footer {
      display: grid;
      grid-template-columns: repeat(2,50vw);
      font-size: x-large;
    }
  
  figure img {
      vertical-align: top;
    }
  
  figure figcaption {
      text-align: center;
  }
  
  figure {
    display: inline-block;
    text-align: center;
  }
  
  .Div-Posters {
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5vw;
  }
}

-----------------------------------------------------------------------------
 .omkader {
    border: 3px double #1C6EA4;
    border-radius: 10px 10px 10px 10px;
  }

  ----------------------------------------------------------------------------
  --mediaqueries
  and (max-height: 600px)

   @media screen and (max-width: 399px) and (min-height: 600px) {
    
    .grid-view {
      display: grid;
      grid-template-columns: repeat(2,40vw);
    }
    
    .figcapText{
      font-size: medium;
    }
    
    figure img {
        vertical-align: top;
      }
    
    figure figcaption {
        text-align: center;
    }
    
    figure {
      display: inline-block;
      text-align: center;
    }
    
    .Div-anime {
      height: 70vw;
      width: 38vw;
    }
  
    .posterImg {
      height: 50vw;
      width: 38vw;
    }
  
    .Div-Posters {
      display: block;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 5vw;
    }
  }

