 <Route path='/info' Component={Info}>

import React from 'react';

class Info extends React.Component {
    constructor(props){
        super(props);
        this.state = {
            items: [],
            isLoaded: false,
        }
    } //constructor

    componentDidMount(){
        fetch('https://kitsu.io/api/edge/anime?filter[text]=one%20piece')
        .then(res => res.json())
        .then(json => {
            this.setState({
                isLoaded: true,
                items: json,
            })
        });
    } //componentDidMount

    render(){
        var {isLoaded, items} = this.state;
        if (!isLoaded){
            return <h1>Loading ... </h1>
        } else {
            var title = items.data[0].attributes.titles.en;
            var startDate = items.data[0].attributes.startDate;
            return (
                <div>
                   <h1>{title}</h1>
                   <p className="startDate">{startDate}</p>
                </div>
            );
        }
    } //render
}

export default Info;

import React from 'react'

const Info = () => {
    return (
        <h1>Info</h1>
    )
}

export default Info;


 var source = items.data[0].attributes.posterImage.tiny
            return (
                <BrowserRouter>
                    <div>
                        <Link to="/info">
                            <img src={source} alt="One Piece poster"></img>
                        </Link>
                        <Route path='/info' component={Info}/>
                    </div>
                </BrowserRouter>
            );


            items.forEach(item => {
                this.item = items.data[i].id;
                i++;
                return <p>{item}</p>
            });

 ids = ids.map(function(item, index){
                return(
                    <li key={index}>{item}</li>
                );
            });

            return (
                <div>
                    <ul>{ids}</ul>
                </div>
            );

import firebase from "firebase";

if (!firebase.apps.length) {
    // Initialize Cloud Firestore through Firebase
    const firebaseApp = firebase.initializeApp({
        apiKey: 'AIzaSyBQmDSKrot-kkHU9YtFrI1PMCr3YY0156Y',
        authDomain: 'https://animereactapp.firebaseapp.com/',
        projectId: 'animereactapp',
        databaseURL: "https://animereactapp.firebaseio.com/",
        storageBucket: "gs://animereactapp.appspot.com",
        messagingSenderId: "863356677005"
    });

    var db = firebaseApp.firestore();

     db.collection("TrendingAnime").add({
        id: ids[i],
        posterURL: posters[i]
    })
    .then(function(docRef) {
        console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });


var Trending = db.collection("TrendingAnime");
var query = Trending.where("id", "==", ids[i]);
Trending.doc(query).update({posterURL: posters[i]});

db.collection("cities").where("capital", "==", true)
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });


db.collection("TrendingAnime").where("id", "==", ids[i])
                    .get()
                    .then(function(querySnapshot) {
                        querySnapshot.forEach(function(doc) {
                            db.collection("TrendingAnime").doc(doc.id).update({posterURL: posters[i]});
                            // doc.data() is never undefined for query doc snapshots
                            console.log(doc.id, " => ", doc.data());
                        });
                    })
                    .catch(function(error) {
                        console.log("Error getting documents: ", error);
                    });

if (!db.collection("TrendingAnime")){
    db.collection("TrendingAnime").add({
        id: ids[i],
        posterURL: posters[i]
    })
    .then(function(docRef) {
        console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });
    } else {
    db.collection("TrendingAnime").where("id", "==", ids[i])
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
            var Trending = db.collection("TrendingAnime");
            // Set the "capital" field of the city 'DC'
            return Trending.doc(doc.id).update({
                posterURL: posters[i]
            })
            .then(function() {
                console.log("Document successfully updated!");
            })
            .catch(function(error) {
                // The document probably doesn't exist.
                console.error("Error updating document: ", error);
            });
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });

    }

     return Trending.doc(doc.id).update({
                                posterURL: posters[i]
                            })
                            .then(function() {
                                console.log("Document successfully updated!");
                            })
                            .catch(function(error) {
                                // The document probably doesn't exist.
                                console.error("Error updating document: ", error);
                            });

if (!db.collection("TrendingAnime")){
    db.collection("TrendingAnime").add({
        id: ids[i],
        posterURL: posters[i]
    })
    .then(function(docRef) {
        console.log("Document written with ID: ", docRef.id);
    })
    .catch(function(error) {
        console.error("Error adding document: ", error);
    });
} else {
    /** 
    db.collection("TrendingAnime").where("id", "==", ids[i])
    .get()
    .then(function(querySnapshot) {
        querySnapshot.forEach(function(doc) {
            // doc.data() is never undefined for query doc snapshots
            console.log(doc.id, " => ", doc.data());
            var Trending = db.collection("TrendingAnime");
            
            db.collection("TrendingAnime").doc(doc.id).set({
                posterURL: posters[i]
            })
            .then(function() {
                console.log("Document successfully written!");
            })
            .catch(function(error) {
                console.error("Error writing document: ", error);
            });
        });
    })
    .catch(function(error) {
        console.log("Error getting documents: ", error);
    });*/
    
}

db.collection("TrendingAnime").where("posterURL", "==", posters[i])
.get()
.then(function(querySnapshot) {
    querySnapshot.forEach(function(doc) {
        // doc.data() is never undefined for query doc snapshots
        console.log("Geen aanpassing is gemaakt");
    });
})
.catch(function(error) {
    console.log("Error getting documents: ", error);
});


// delete a collection
db.collection("TrendingAnime")
.get()
.then(res => {
    res.forEach(element => {
    element.ref.delete();
    });
});